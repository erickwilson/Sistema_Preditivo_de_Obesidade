# app.py

# --- 1. Importa√ß√£o das Bibliotecas ---
# streamlit: a biblioteca principal para criar a interface web.
# pandas: para criar o DataFrame com os dados do usu√°rio.
# joblib: para carregar nosso modelo e encoders que foram salvos anteriormente.
import streamlit as st
import pandas as pd
import joblib

# --- 2. Configura√ß√£o Inicial da P√°gina ---
# Este comando configura o t√≠tulo que aparece na aba do navegador e o √≠cone.
# Deve ser o primeiro comando do Streamlit a ser executado no script.
st.set_page_config(
    page_title="Previs√£o de Obesidade",
    page_icon="ü©∫",  # √çcone de estetosc√≥pio
    layout="centered" # Centraliza o conte√∫do na p√°gina
)

# --- 3. Carregamento do Modelo e Encoders ---
# Usamos uma fun√ß√£o com o decorador @st.cache_resource para que o modelo
# seja carregado apenas uma vez, otimizando a performance da aplica√ß√£o.
@st.cache_resource
def carregar_modelo_e_encoders():
    """
    Carrega o modelo de Machine Learning e os encoders salvos pelo script de treinamento.
    Retorna None se os arquivos n√£o forem encontrados.
    """
    try:
        modelo_carregado = joblib.load('modelo_obesidade.pkl')
        encoders_carregados = joblib.load('encoders.pkl')
        return modelo_carregado, encoders_carregados
    except FileNotFoundError:
        st.error("ERRO: Arquivos 'modelo_obesidade.pkl' ou 'encoders.pkl' n√£o encontrados.")
        st.error("Por favor, execute o script 'treinamento_modelo.py' primeiro para gerar os arquivos.")
        return None, None

# Carrega os artefatos na mem√≥ria.
modelo, mapeamento_encoders = carregar_modelo_e_encoders()

# --- 4. Dicion√°rios para Tradu√ß√£o da Interface ---
# Estes dicion√°rios ajudam a traduzir a interface para o portugu√™s,
# enquanto mant√™m os valores em ingl√™s que o modelo espera.
dicionario_traducao_genero = {'Male': 'Masculino', 'Female': 'Feminino'}
dicionario_traducao_sim_nao = {'yes': 'Sim', 'no': 'N√£o'}
dicionario_traducao_refeicoes = {'no': 'N√£o', 'Sometimes': '√Äs vezes', 'Frequently': 'Frequentemente', 'Always': 'Sempre'}
dicionario_traducao_alcool = {'no': 'N√£o', 'Sometimes': '√Äs vezes', 'Frequently': 'Frequentemente', 'Always': 'Sempre'}
dicionario_traducao_transporte = {'Automobile': 'Autom√≥vel', 'Motorbike': 'Moto', 'Bike': 'Bicicleta', 'Public_Transportation': 'Transporte P√∫blico', 'Walking': 'A p√©'}

# Dicion√°rio para traduzir o resultado final do modelo.
dicionario_traducao_previsao = {
    'Insufficient_Weight': 'Peso Insuficiente',
    'Normal_Weight': 'Peso Normal',
    'Overweight_Level_I': 'Sobrepeso N√≠vel I',
    'Overweight_Level_II': 'Sobrepeso N√≠vel II',
    'Obesity_Type_I': 'Obesidade Tipo I',
    'Obesity_Type_II': 'Obesidade Tipo II',
    'Obesity_Type_III': 'Obesidade Tipo III'
}

# --- 5. Constru√ß√£o da Interface Gr√°fica (UI) ---
st.title("ü©∫ Sistema Preditivo de Obesidade")
st.markdown("Insira os dados do paciente na barra lateral √† esquerda para obter uma previs√£o sobre o n√≠vel de obesidade.")

# A barra lateral (sidebar) √© usada para agrupar os controles de entrada.
st.sidebar.header("Par√¢metros do Paciente")

def obter_dados_do_usuario():
    """
    Cria todos os campos de entrada na barra lateral e coleta os dados do usu√°rio.
    Retorna dois dicion√°rios: um para o modelo (em ingl√™s) e um para exibi√ß√£o (em portugu√™s).
    """
    # --- Se√ß√£o de Informa√ß√µes Pessoais ---
    st.sidebar.markdown("### üßç Informa√ß√µes Pessoais")
    genero_pt = st.sidebar.selectbox('G√™nero', options=list(dicionario_traducao_genero.values()))
    idade = st.sidebar.slider('Idade', 14, 100, 25)
    altura_m = st.sidebar.slider('Altura (em metros)', 1.20, 2.20, 1.70, 0.01)
    peso_kg = st.sidebar.slider('Peso (em kgs)', 30.0, 200.0, 70.0, 0.5)
    historia_familiar_pt = st.sidebar.radio('Hist√≥rico familiar de sobrepeso?', options=list(dicionario_traducao_sim_nao.values()), horizontal=True)

    # --- Se√ß√£o de H√°bitos Alimentares ---
    st.sidebar.markdown("### üçé H√°bitos Alimentares")
    comida_calorica_pt = st.sidebar.radio('Come alimentos de alta caloria com frequ√™ncia?', options=list(dicionario_traducao_sim_nao.values()), horizontal=True)
    consumo_vegetais = st.sidebar.slider('Frequ√™ncia de consumo de vegetais', 1, 3, 2,
        help="1 = Nunca, 2 = √Äs vezes, 3 = Sempre")
    num_refeicoes = st.sidebar.slider('N¬∫ de refei√ß√µes principais di√°rias', 1, 4, 3)
    come_entre_refeicoes_pt = st.sidebar.selectbox('Come entre as refei√ß√µes?', options=list(dicionario_traducao_refeicoes.values()))
    consumo_agua = st.sidebar.slider('Consumo di√°rio de √°gua', 1, 3, 2,
        help="1 = Menos de 1 Litro, 2 = Entre 1 e 2 Litros, 3 = Mais de 2 Litros")
    monitora_calorias_pt = st.sidebar.radio('Monitora as calorias que ingere?', options=list(dicionario_traducao_sim_nao.values()), horizontal=True)
    consumo_alcool_pt = st.sidebar.selectbox('Frequ√™ncia de consumo de √°lcool?', options=list(dicionario_traducao_alcool.values()))

    # --- Se√ß√£o de H√°bitos de Vida ---
    st.sidebar.markdown("### üèÉ H√°bitos de Vida")
    fumante_pt = st.sidebar.radio('Voc√™ fuma?', options=list(dicionario_traducao_sim_nao.values()), horizontal=True)
    freq_atividade_fisica = st.sidebar.slider('Frequ√™ncia de atividade f√≠sica', 0, 3, 1,
        help="0 = Nenhuma, 1 = 1 a 2 dias/semana, 2 = 2 a 4 dias/semana, 3 = 4 a 5 dias/semana")
    tempo_telas = st.sidebar.slider('Tempo di√°rio em telas (celular, TV, etc)', 0, 2, 1,
        help="0 = 0 a 2 horas, 1 = 3 a 5 horas, 2 = Mais de 5 horas")
    transporte_pt = st.sidebar.selectbox('Transporte principal?', options=list(dicionario_traducao_transporte.values()))

    # Converte as sele√ß√µes em portugu√™s de volta para ingl√™s para o modelo.
    genero_en = [k for k, v in dicionario_traducao_genero.items() if v == genero_pt][0]
    historia_familiar_en = [k for k, v in dicionario_traducao_sim_nao.items() if v == historia_familiar_pt][0]
    comida_calorica_en = [k for k, v in dicionario_traducao_sim_nao.items() if v == comida_calorica_pt][0]
    come_entre_refeicoes_en = [k for k, v in dicionario_traducao_refeicoes.items() if v == come_entre_refeicoes_pt][0]
    monitora_calorias_en = [k for k, v in dicionario_traducao_sim_nao.items() if v == monitora_calorias_pt][0]
    consumo_alcool_en = [k for k, v in dicionario_traducao_alcool.items() if v == consumo_alcool_pt][0]
    fumante_en = [k for k, v in dicionario_traducao_sim_nao.items() if v == fumante_pt][0]
    transporte_en = [k for k, v in dicionario_traducao_transporte.items() if v == transporte_pt][0]

    # Dicion√°rio com os dados no formato que o modelo espera (em ingl√™s).
    dados_para_modelo = {'Gender': genero_en, 'Age': idade, 'Height': altura_m, 'Weight': peso_kg, 'family_history_with_overweight': historia_familiar_en, 'FAVC': comida_calorica_en, 'FCVC': consumo_vegetais, 'NCP': num_refeicoes, 'CAEC': come_entre_refeicoes_en, 'SMOKE': fumante_en, 'CH2O': consumo_agua, 'SCC': monitora_calorias_en, 'FAF': freq_atividade_fisica, 'TUE': tempo_telas, 'CALC': consumo_alcool_en, 'MTRANS': transporte_en}
    
    # Dicion√°rio com os dados formatados para exibi√ß√£o na tela (em portugu√™s).
    dados_para_exibicao = {'G√™nero': genero_pt, 'Idade': idade, 'Altura': altura_m, 'Peso': peso_kg, 'Hist√≥rico Familiar de Sobrepeso': historia_familiar_pt, 'Consumo Frequente de Alim. Cal√≥ricos': comida_calorica_pt, 'Consumo de Vegetais': consumo_vegetais, 'N¬∫ de Refei√ß√µes Principais': num_refeicoes, 'Come entre Refei√ß√µes': come_entre_refeicoes_pt, 'Fumante': fumante_pt, 'Consumo de √Ågua': consumo_agua, 'Monitora Calorias': monitora_calorias_pt, 'Atividade F√≠sica': freq_atividade_fisica, 'Tempo em Dispositivos': tempo_telas, 'Consumo de √Ålcool': consumo_alcool_pt, 'Transporte Principal': transporte_pt}
    
    return pd.DataFrame(dados_para_modelo, index=[0]), dados_para_exibicao

# --- 6. L√≥gica Principal da Aplica√ß√£o ---
# A aplica√ß√£o s√≥ continua se o modelo e os encoders foram carregados com sucesso.
if modelo and mapeamento_encoders:
    # Coleta os dados do usu√°rio a partir da barra lateral.
    dataframe_modelo, dicionario_exibicao = obter_dados_do_usuario()

    # --- Se√ß√£o de Aviso de Confiabilidade ---
    limites_originais_treino = {'Age': 62, 'Weight': 173, 'Height': 1.98}
    if (dicionario_exibicao['Idade'] > limites_originais_treino['Age'] or
        dicionario_exibicao['Peso'] > limites_originais_treino['Weight'] or
        dicionario_exibicao['Altura'] > limites_originais_treino['Height']):
        st.warning(
            "**Aten√ß√£o:** Os valores de Idade, Peso ou Altura inseridos est√£o fora da faixa de dados "
            "utilizada para treinar o modelo. A previs√£o pode ter uma confiabilidade menor."
        )

    # Cria uma se√ß√£o expans√≠vel para mostrar o resumo dos dados inseridos.
    with st.expander("Ver Resumo dos Dados Fornecidos", expanded=False):
        col1, col2 = st.columns(2)
        itens_dicionario = list(dicionario_exibicao.items())
        ponto_medio = len(itens_dicionario) // 2
        with col1:
            for chave, valor in itens_dicionario[:ponto_medio]:
                st.markdown(f"**{chave}:** {valor}")
        with col2:
            for chave, valor in itens_dicionario[ponto_medio:]:
                st.markdown(f"**{chave}:** {valor}")

    # Adiciona um espa√ßo e centraliza o bot√£o de predi√ß√£o.
    st.write("")
    _ , coluna_botao, _ = st.columns([1, 2, 1])
    with coluna_botao:
        # Se o bot√£o for clicado, o c√≥digo dentro do 'if' √© executado.
        if st.button('**Realizar Predi√ß√£o**', use_container_width=True):
            
            # Prepara os dados para o modelo, aplicando a mesma transforma√ß√£o num√©rica do treino.
            dataframe_encoded = dataframe_modelo.copy()
            for coluna, encoder in mapeamento_encoders.items():
                if coluna in dataframe_encoded.columns:
                    # Transforma os dados usando o encoder correto.
                    if hasattr(encoder, 'categories_'): # OrdinalEncoder
                        dataframe_encoded[coluna] = encoder.transform(dataframe_encoded[[coluna]])
                    else: # LabelEncoder
                        dataframe_encoded[coluna] = encoder.transform(dataframe_encoded[coluna])

            # --- Execu√ß√£o da Predi√ß√£o ---
            previsao_bruta = modelo.predict(dataframe_encoded)[0]
            previsao_probabilidades = modelo.predict_proba(dataframe_encoded)
            
            # Traduz o resultado da previs√£o para portugu√™s.
            resultado_final_traduzido = dicionario_traducao_previsao.get(previsao_bruta, previsao_bruta)
            # Calcula a confian√ßa do modelo na previs√£o.
            confianca_previsao = previsao_probabilidades.max() * 100

            # --- Exibi√ß√£o dos Resultados ---
            st.subheader('Resultado da Predi√ß√£o')
            st.success(f'O n√≠vel de obesidade previsto √©: **{resultado_final_traduzido}**')
            st.info(f'Confian√ßa do modelo nesta previs√£o: **{confianca_previsao:.2f}%**')

            st.subheader('Confian√ßa do Modelo por Categoria')
            
            # Prepara os dados para o gr√°fico de barras ordenado.
            df_probabilidades = pd.DataFrame({
                'Classe': modelo.classes_, 
                'Probabilidade': previsao_probabilidades[0] * 100  # Multiplica por 100 para exibir em porcentagem
            })
            df_probabilidades['Classe Traduzida'] = df_probabilidades['Classe'].map(dicionario_traducao_previsao)
            
            ordem_grafico = list(dicionario_traducao_previsao.values())
            df_probabilidades['Classe Traduzida'] = pd.Categorical(df_probabilidades['Classe Traduzida'], categories=ordem_grafico, ordered=True)
            df_probabilidades = df_probabilidades.sort_values('Classe Traduzida')
            
            # Exibe o gr√°fico de barras.
            st.bar_chart(df_probabilidades, x='Classe Traduzida', y='Probabilidade')

# Se o modelo n√£o puder ser carregado, exibe um aviso final.
else:
    st.error("Aplica√ß√£o n√£o pode ser iniciada. Verifique o carregamento do modelo.")
